'use client';

import { useLanguage } from "../../context/LanguageContext";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "../ui/dialog";
import { Button } from "../ui/button";
import { Loader2 } from "lucide-react";
import { useState, useEffect } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useToast } from "../ui/use-toast";
import { useUser } from "@clerk/nextjs";
import { v4 as uuidv4 } from 'uuid';
import { useRouter } from 'next/navigation';

interface PaymentModalProps {
  isOpen: boolean;
  onClose: () => void;
  packageData: {
    id: string;
    name_th: string;
    name_en: string;
    price: number;
    duration_days: number;
    daily_limit: number;
  };
  courseId: string;
  onSuccess?: () => void;
}

export default function PaymentModal({ 
  isOpen, 
  onClose, 
  packageData, 
  courseId,
  onSuccess 
}: PaymentModalProps) {
  const { language } = useLanguage();
  const { user } = useUser();
  const [isProcessing, setIsProcessing] = useState(false);
  const [userCoins, setUserCoins] = useState<number>(0);
  const [userId, setUserId] = useState<string>('');
  const supabase = createClientComponentClient();
  const { toast } = useToast();
  const router = useRouter();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™
  const checkExistingAccess = async () => {
    if (!user) {
      toast({
        variant: "destructive",
        title: language === 'th' ? "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ" : "Cannot Process",
        description: language === 'th'
          ? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
          : "Please login before proceeding"
      });
      return true;
    }

    try {
      const { data: accessData } = await supabase
        .from('course_access')
        .select('*')
        .eq('user_id', user.id)
        .eq('course_id', courseId)
        .eq('access_type', 'PREMIUM')
        .eq('status', 'ACTIVE')
        .maybeSingle();

      return !!accessData;
    } catch (error) {
      console.error('Error checking access:', error);
      return false;
    }
  };

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ modal ‡πÄ‡∏õ‡∏¥‡∏î
  useEffect(() => {
    const fetchUserData = async () => {
      if (!user) {
        toast({
          variant: "destructive",
          title: language === 'th' ? "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ" : "Cannot Process",
          description: language === 'th'
            ? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
            : "Please login before proceeding"
        });
        onClose();
        return;
      }

      try {
        const { data: userData, error } = await supabase
          .from('User')
          .select('id, coins')
          .eq('clerkId', user.id)
          .maybeSingle();

        if (error) throw error;

        if (userData) {
          setUserId(userData.id);
          setUserCoins(userData.coins);
        } else {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          const { data: newUser, error: createError } = await supabase
            .from('User')
            .insert([{
              clerkId: user.id,
              coins: 0
            }])
            .select()
            .single();

          if (createError) throw createError;

          if (newUser) {
            setUserId(newUser.id);
            setUserCoins(0);
          }
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const hasAccess = await checkExistingAccess();
        if (hasAccess) {
          toast({
            variant: "destructive",
            title: language === 'th' ? "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ" : "Cannot Purchase",
            description: language === 'th'
              ? "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
              : "You already have access to this course"
          });
          onClose();
        }
      } catch (error) {
        console.error('Error fetching user data:', error);
        toast({
          variant: "destructive",
          title: language === 'th' ? "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" : "Error",
          description: language === 'th'
            ? "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ"
            : "Cannot fetch user data"
        });
        onClose();
      }
    };

    if (isOpen) {
      fetchUserData();
    }
  }, [isOpen, user, supabase, courseId, language, onClose]);

  const handlePayment = async () => {
    if (!user || !userId) {
      toast({
        variant: "destructive",
        title: language === 'th' ? "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ" : "Cannot Process",
        description: language === 'th'
          ? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
          : "Please login before proceeding"
      });
      return;
    }

    try {
      setIsProcessing(true);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
      if (userCoins < packageData.price) {
        toast({
          variant: "destructive",
          title: language === 'th' ? "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠" : "Insufficient Coins",
          description: language === 'th'
            ? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠"
            : "Please top up your coins before proceeding"
        });
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const hasAccess = await checkExistingAccess();
      if (hasAccess) {
        toast({
          variant: "destructive",
          title: language === 'th' ? "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ" : "Cannot Purchase",
          description: language === 'th'
            ? "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
            : "You already have access to this course"
        });
        return;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á transaction ID
      const transactionId = uuidv4();

      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
      const { error: transactionError } = await supabase.rpc('process_course_purchase', {
        p_user_id: userId,
        p_course_id: courseId,
        p_package_id: packageData.id,
        p_transaction_id: transactionId,
        p_amount: packageData.price,
        p_duration_days: packageData.duration_days,
        p_daily_limit: packageData.daily_limit
      });

      if (transactionError) {
        console.error('Transaction error:', transactionError);
        toast({
          variant: "destructive",
          title: language === 'th' ? "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" : "Transaction Failed",
          description: language === 'th'
            ? "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
            : "Cannot process the purchase. Please try again."
        });
        return;
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
      setUserCoins(prev => prev - packageData.price);

      // ‡πÅ‡∏™‡∏î‡∏á toast success
      toast({
        title: language === 'th' ? "‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" : "Purchase Successful",
        description: language === 'th'
          ? `‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ${packageData.duration_days} ‡∏ß‡∏±‡∏ô (${packageData.daily_limit} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô)`
          : `You can use this course for ${packageData.duration_days} days (${packageData.daily_limit} times/day)`
      });

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback onSuccess ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (onSuccess) {
        onSuccess();
      }

      // ‡∏õ‡∏¥‡∏î modal
      onClose();

      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      setTimeout(() => {
        router.refresh();
      }, 1000);

    } catch (error) {
      console.error('Payment error:', error);
      toast({
        variant: "destructive",
        title: language === 'th' ? "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" : "Error",
        description: language === 'th'
          ? "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ"
          : "Cannot process the payment"
      });
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="text-xl font-semibold">
            {language === 'th' ? '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô' : 'Confirm Payment'}
          </DialogTitle>
        </DialogHeader>

        <div className="flex flex-col space-y-6 p-4">
          {/* Package Title */}
          <div className="text-center space-y-1">
            <div className="text-xl font-medium">
              <span className="mr-2">üéÅ</span>
              {language === 'th' ? '‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô 30 ‡∏ß‡∏±‡∏ô' : 'Basic Package 30 Days'}
            </div>
          </div>

          {/* Price Details */}
          <div className="space-y-2 font-mono">
            {/* Package Price */}
            <div className="flex justify-between items-center">
              <span className="text-gray-600">
                {language === 'th' ? '‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à' : 'Package Price'}
              </span>
              <span className="font-medium">
                {packageData.price.toLocaleString()} ü™ô
              </span>
            </div>

            {/* Current Coins */}
            <div className="flex justify-between items-center">
              <span className="text-gray-600">
                {language === 'th' ? '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì' : 'Your Coins'}
              </span>
              <span className="font-medium">
                {userCoins.toLocaleString()} ü™ô
              </span>
            </div>

            {/* Divider Line */}
            <div className="border-t border-gray-200 my-2"></div>

            {/* Remaining Coins */}
            <div className="flex justify-between items-center">
              <span className="text-gray-600">
                {language === 'th' ? '‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠' : 'Remaining'}
              </span>
              <span className="font-medium">
                {(userCoins - packageData.price).toLocaleString()} ü™ô
              </span>
            </div>
          </div>

          {/* Insufficient Coins Warning */}
          {userCoins < packageData.price && (
            <div className="text-red-500 text-sm text-center">
              {language === 'th' 
                ? '‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç'
                : 'Insufficient coins. Please top up.'}
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex justify-end space-x-4 mt-4">
            <Button 
              variant="outline" 
              onClick={onClose}
              disabled={isProcessing}
            >
              {language === 'th' ? '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' : 'Cancel'}
            </Button>
            <Button
              onClick={handlePayment}
              disabled={isProcessing || userCoins < packageData.price}
              className="bg-black text-white hover:bg-gray-800"
            >
              {isProcessing ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  {language === 'th' ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...' : 'Processing...'}
                </>
              ) : (
                language === 'th' ? '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô' : 'Confirm Payment'
              )}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
