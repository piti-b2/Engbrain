'use client'

import { useState } from 'react';
import { Button } from "../../../../components/ui/button";
import { Textarea } from "../../../../components/ui/textarea";
import { useToast } from "../../../../components/ui/use-toast";
import { DEMO_COURSES } from "../../../../lib/demo-data";
import DashboardComponent from "../../../../components/dashboard";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../../../../components/ui/tabs";
import { ArrowLeft, Send, Clock, Save, PlayCircle, Coins, Diamond } from 'lucide-react';
import Link from 'next/link';

// ‡πÄ‡∏û‡∏¥‡πà‡∏° interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô
interface HomeworkStatus {
  status: 'not_started' | 'draft' | 'submitted' | 'graded';
  lastSaved?: string;
  submittedAt?: string;
  submissionCount: number;
  grade?: number;
  feedback?: string;
  isCorrect?: boolean;  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
}

interface HomeworkPageProps {
  params: {
    homeworkId: string;
  };
}

export default function HomeworkPage({ params }: HomeworkPageProps) {
  const [answer, setAnswer] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [homeworkStatus, setHomeworkStatus] = useState<HomeworkStatus>({
    status: 'not_started',
    submissionCount: 0
  });
  const { toast } = useToast();

  // ‡∏´‡∏≤ homework ‡∏à‡∏≤‡∏Å DEMO_COURSES
  const lesson = DEMO_COURSES.flatMap(course => 
    course.lessons?.map(lesson => ({
      ...lesson,
      courseId: course.id,
      courseTitleTh: course.titleTh
    })) || []
  ).find(lesson => lesson.id === params.homeworkId);

  const homework = lesson?.homework;
  const courseId = lesson?.courseId;
  const courseTitleTh = lesson?.courseTitleTh;

  if (!homework || !lesson) {
    return (
      <DashboardComponent>
        <div className="flex-1 space-y-4 p-8">
          <div className="space-y-4">
            <Link href="/dashboard/courses" className="inline-flex items-center text-blue-600 hover:text-blue-800">
              <ArrowLeft className="w-4 h-4 mr-2" />
              ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤
            </Link>
            <h1 className="text-2xl font-bold text-red-600">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</h1>
            <p className="text-gray-600">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô</p>
          </div>
        </div>
      </DashboardComponent>
    );
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö draft
  const handleSaveDraft = async () => {
    if (!answer.trim()) {
      toast({
        title: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
        variant: "destructive",
      });
      return;
    }

    setIsSaving(true);
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 800));
    setIsSaving(false);
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    setHomeworkStatus({
      ...homeworkStatus,
      lastSaved: new Date().toLocaleString('th-TH')
    });
    
    toast({
      title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß",
      description: "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á",
    });
  };

  const handleSubmit = async () => {
    if (!answer.trim()) {
      toast({
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö",
        variant: "destructive",
      });
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (homeworkStatus.submissionCount > 0) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á)
      const userCoins = 100; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç 100 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
      if (userCoins < 5) {
        toast({
          title: "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠",
          description: "‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ 5 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠",
          variant: "destructive",
        });
        return;
      }
    }

    setIsSubmitting(true);
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à
    if (homework.gradingType === 'exact') {
      // ‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
      const isCorrect = answer.trim().toLowerCase() === homework.correctAnswer.toLowerCase();
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      setHomeworkStatus({
        status: 'graded',
        submittedAt: new Date().toLocaleString('th-TH'),
        submissionCount: homeworkStatus.submissionCount + 1,
        isCorrect,
        grade: isCorrect ? 100 : 0,
        feedback: isCorrect 
          ? "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á üéâ" 
          : "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
      });

      // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à
      toast({
        title: isCorrect ? "‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! üéâ" : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        description: isCorrect 
          ? "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö " + homework.points + " ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏ä‡∏£ 1 ‡πÄ‡∏°‡πá‡∏î"
          : "‡∏•‡∏≠‡∏á‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ä‡πâ 5 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)",
        variant: isCorrect ? "default" : "destructive",
      });

    } else {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô (manual ‡∏´‡∏£‡∏∑‡∏≠ AI)
      setHomeworkStatus({
        status: 'submitted',
        submittedAt: new Date().toLocaleString('th-TH'),
        submissionCount: homeworkStatus.submissionCount + 1
      });
      
      toast({
        title: "‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" + (homeworkStatus.submissionCount > 0 ? " (‡πÉ‡∏ä‡πâ 5 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç)" : ""),
        description: "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏ä‡∏£‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå",
      });
    }

    setIsSubmitting(false);
  };

  return (
    <DashboardComponent>
      <div className="flex-1 p-6 space-y-6">
        <div className="flex items-center justify-between">
          <div className="space-y-1">
            <Link 
              href={`/dashboard/courses/${courseId}/learn`} 
              className="inline-flex items-center text-blue-600 hover:text-blue-800"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            </Link>
            <h1 className="text-2xl font-bold">{courseTitleTh}</h1>
            <h2 className="text-xl">{homework.title}</h2>
          </div>
          {homeworkStatus.status === 'submitted' && (
            <div className="bg-green-100 text-green-800 px-4 py-2 rounded-md">
              ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß: {homeworkStatus.submittedAt}
            </div>
          )}
        </div>

        <div className="bg-yellow-50 rounded-lg shadow p-6 space-y-6">
          <div className="space-y-4">
            <h3 className="text-lg font-semibold">{homework.title}</h3>
            <p className="text-gray-600">{homework.description}</p>
            <div className="flex items-center gap-4 text-sm text-gray-500">
              <span className="flex items-center">
                <Clock className="w-4 h-4 mr-1" />
                ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: {new Date(homework.dueDate).toLocaleDateString('th-TH')}
              </span>
              <span className="flex items-center">
                <Diamond className="w-4 h-4 mr-1" />
                ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: {homework.points} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô + ‡πÄ‡∏û‡∏ä‡∏£
              </span>
              {homeworkStatus.submissionCount > 0 && (
                <span className="flex items-center text-orange-600">
                  <Coins className="w-4 h-4 mr-1" />
                  ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô: 5 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
                </span>
              )}
              {homework.gradingType === 'exact' && (
                <span className="text-blue-600">
                  ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏ó‡∏£‡∏≤‡∏ö‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                </span>
              )}
            </div>
          </div>

          <Tabs defaultValue="answer" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="answer">‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô</TabsTrigger>
              <TabsTrigger value="example">‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á</TabsTrigger>
            </TabsList>
            <TabsContent value="answer" className="space-y-4">
              <div className="space-y-4">
                <label className="block font-medium">‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</label>
                <Textarea
                  value={answer}
                  onChange={(e) => setAnswer(e.target.value)}
                  placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
                  className="min-h-[200px]"
                />
                
                {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à */}
                {homeworkStatus.status === 'graded' && (
                  <div className={`p-4 rounded-md ${
                    homeworkStatus.isCorrect 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-red-100 text-red-800'
                  }`}>
                    <p className="font-medium">{homeworkStatus.feedback}</p>
                    {homeworkStatus.isCorrect && (
                      <p className="text-sm mt-2">
                        ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: {homework.points} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô + ‡πÄ‡∏û‡∏ä‡∏£ 1 ‡πÄ‡∏°‡πá‡∏î
                      </p>
                    )}
                  </div>
                )}

              </div>

              <div className="flex justify-end gap-4">
                <Button
                  variant="outline"
                  onClick={handleSaveDraft}
                  disabled={isSaving || homeworkStatus.status === 'submitted'}
                >
                  <Save className="w-4 h-4 mr-2" />
                  {isSaving ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡πà‡∏≤‡∏á'}
                </Button>
                <Button
                  onClick={handleSubmit}
                  disabled={isSubmitting || homeworkStatus.status === 'submitted'}
                >
                  <Send className="w-4 h-4 mr-2" />
                  {isSubmitting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : '‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô'}
                </Button>
              </div>
            </TabsContent>
            <TabsContent value="example" className="space-y-4">
              {homework.videoUrl ? (
                <div className="aspect-video">
                  <iframe
                    src={homework.videoUrl}
                    className="w-full h-full rounded-lg"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowFullScreen
                  />
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center p-8 text-center text-gray-500 bg-gray-50 rounded-lg">
                  <PlayCircle className="w-12 h-12 mb-2" />
                  <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ</p>
                </div>
              )}
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </DashboardComponent>
  );
}
