'use client'

import { useState } from 'react';
import Image from 'next/image';
import { Button } from '@/components/ui/button';
import { Clock, PlayCircle } from 'lucide-react';
import { DEMO_COURSES } from '@/lib/demo-data';
import { useToast } from "@/components/ui/use-toast";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

interface CoursePageProps {
  params: {
    courseId: string;
  };
}

export default function CoursePage({ params }: CoursePageProps) {
  const course = DEMO_COURSES.find((c) => c.id === params.courseId);
  const [showPurchaseDialog, setShowPurchaseDialog] = useState(false);
  const [isPurchasing, setIsPurchasing] = useState(false);
  const [showBookPurchaseDialog, setShowBookPurchaseDialog] = useState(false);
  const [isBookPurchasing, setIsBookPurchasing] = useState(false);
  const { toast } = useToast();
  const userCoins = 100; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ 100 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç

  if (!course) {
    return (
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-2xl font-bold">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</h1>
      </div>
    );
  }

  // Mock lessons data
  const lessons = [
    {
      id: 1,
      title: '‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≠‡∏£‡πå‡∏™',
      titleEn: 'Chapter 1: Course Introduction',
      duration: '15 ‡∏ô‡∏≤‡∏ó‡∏µ',
      isPreview: true,
    },
    {
      id: 2,
      title: '‡∏ö‡∏ó‡∏ó‡∏µ‡πà 2: ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
      titleEn: 'Chapter 2: Essential Basics',
      duration: '30 ‡∏ô‡∏≤‡∏ó‡∏µ',
      isPreview: false,
    },
    {
      id: 3,
      title: '‡∏ö‡∏ó‡∏ó‡∏µ‡πà 3: ‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥',
      titleEn: 'Chapter 3: Practical Exercises',
      duration: '45 ‡∏ô‡∏≤‡∏ó‡∏µ',
      isPreview: false,
    },
    {
      id: 4,
      title: '‡∏ö‡∏ó‡∏ó‡∏µ‡πà 4: ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
      titleEn: 'Chapter 4: Assessment',
      duration: '30 ‡∏ô‡∏≤‡∏ó‡∏µ',
      isPreview: false,
    }
  ];

  const handlePurchase = async () => {
    setIsPurchasing(true);
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1500));
    setIsPurchasing(false);
    setShowPurchaseDialog(false);
    toast({
      title: "‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ",
      description: "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
    });
  };

  const handleBookPurchase = async () => {
    if (!course.book) return;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (userCoins < course.book.priceCoins) {
      toast({
        title: "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏û‡∏≠",
        description: `‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ü™ô ${userCoins} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ü™ô ${course.book.priceCoins} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`,
        variant: "destructive"
      });
      setShowBookPurchaseDialog(false);
      return;
    }

    setIsBookPurchasing(true);
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1500));
    setIsBookPurchasing(false);
    setShowBookPurchaseDialog(false);
    toast({
      title: "‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
      description: "‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 3-5 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£",
    });
  };

  return (
    <>
      <div className="container mx-auto px-4 py-8">
        {/* Hero Section */}
        <div className="relative h-[400px] rounded-xl overflow-hidden mb-8">
          <Image
            src={course.thumbnailUrl}
            alt={course.titleTh}
            fill
            className="object-cover"
          />
          <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center">
            <div className="container mx-auto px-4">
              <span className="inline-block bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm mb-4">
                {course.level === 'beginner' ? '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô' : 
                 course.level === 'intermediate' ? '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' : '‡∏™‡∏π‡∏á'}
              </span>
              <h1 className="text-4xl font-bold text-white mb-2">{course.titleTh}</h1>
              <p className="text-xl text-gray-200 mb-6">{course.titleEn}</p>
              <div className="flex items-center space-x-4 text-white">
                <span>{course.totalLessons} ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</span>
                <span>‚Ä¢</span>
                <span>{course.totalDuration} ‡∏ô‡∏≤‡∏ó‡∏µ</span>
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-xl p-6 shadow-sm mb-6">
              <h2 className="text-2xl font-bold mb-4">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™</h2>
              <p className="text-gray-600 mb-6">{course.descriptionTh}</p>
              <p className="text-gray-600">{course.descriptionEn}</p>
            </div>

            <div className="bg-white rounded-xl p-6 shadow-sm">
              <h2 className="text-2xl font-bold mb-4">‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h2>
              <div className="space-y-4">
                {lessons.map((lesson) => (
                  <div key={lesson.id} className="border rounded-lg">
                    <div className="p-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <h3 className="font-semibold">{lesson.title}</h3>
                          <p className="text-sm text-gray-500">{lesson.titleEn}</p>
                        </div>
                        <div className="flex items-center space-x-3">
                          <div className="flex items-center text-sm text-gray-500">
                            <Clock className="w-4 h-4 mr-1" />
                            <span>{lesson.duration}</span>
                          </div>
                          {lesson.isPreview ? (
                            <Button variant="outline" size="sm" className="flex items-center">
                              <PlayCircle className="w-4 h-4 mr-1" />
                              ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                            </Button>
                          ) : (
                            <Button size="sm" className="flex items-center">
                              <PlayCircle className="w-4 h-4 mr-1" />
                              ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
                            </Button>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Sidebar */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-xl p-6 shadow-sm sticky top-8">
              <div className="text-2xl font-bold mb-4 flex items-center">
                <span className="text-green-600">‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ü‡∏£‡∏µ</span>
              </div>
              <Button 
                className="w-full mb-4" 
                onClick={() => window.location.href = `/dashboard/courses/${course.id}/learn`}
              >
                <PlayCircle className="w-4 h-4 mr-2" />
                ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏•‡∏¢
              </Button>
              {course.book && (
                <Button 
                  variant="outline"
                  className="w-full mb-4" 
                  onClick={() => setShowBookPurchaseDialog(true)}
                >
                  <Image
                    src="/images/icons/book.png"
                    alt="Book"
                    width={16}
                    height={16}
                    className="mr-2"
                  />
                  ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ <span className="text-lg ml-1">ü™ô</span> {course.book.priceCoins}
                </Button>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Purchase Dialog */}
      <Dialog open={showPurchaseDialog} onOpenChange={setShowPurchaseDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™</DialogTitle>
            <DialogDescription>
              ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™ "{course.titleTh}" ‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ {course.priceCoins} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowPurchaseDialog(false)}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button onClick={handlePurchase} disabled={isPurchasing}>
              {isPurchasing ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£..." : "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Book Purchase Dialog */}
      <Dialog open={showBookPurchaseDialog} onOpenChange={setShowBookPurchaseDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠</DialogTitle>
            <DialogDescription>
              ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ "{course.book?.titleTh}" ‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ <span className="text-lg">ü™ô</span> {course.book?.priceCoins} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
              <div className="mt-2 text-sm">
                ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: <span className="text-lg">ü™ô</span> {userCoins}
              </div>
            </DialogDescription>
          </DialogHeader>
          <div className="flex items-center justify-center p-4">
            {course.book?.coverUrl && (
              <Image
                src={course.book.coverUrl}
                alt={course.book.titleTh}
                width={150}
                height={200}
                className="rounded-lg shadow-lg"
              />
            )}
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowBookPurchaseDialog(false)}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button onClick={handleBookPurchase} disabled={isBookPurchasing}>
              {isBookPurchasing ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£..." : "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
